#
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
# By starting with 1 and 2, the first 10 terms will be:
#
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# Find the sum of all the even-valued terms in the sequence which do not exceed four million.
#

require 'pe-library'

# closed form 
#
# Fn = (1 + sqrt(5))^n - (1 - sqrt(5))^n
#      ---------------------------------
#                2^n * sqrt(5)

def binet_fibonacci(n)
  numerator = ((1 + Math.sqrt(5))**n) - ((1 - Math.sqrt(5))**n)
  denominator = 2**n * Math.sqrt(5)
  return Integer(numerator / denominator)
end

i = 1
sum = 0

while ((current_fibonacci = binet_fibonacci(i)) < 4000000)
  i = i + 1
  sum = sum + current_fibonacci if current_fibonacci.even?
end

puts sum